"""
Test script for download functionality
"""

import streamlit as st
import os
import tempfile
from pathlib import Path
import sys

# Add the project to the path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from app_components.download_component import DownloadHelper

def create_test_file():
    """Create a test file for download testing"""
    # Create a temporary test file
    test_content = """# Test Data File
This is a test file to verify download functionality.

Generated by: GeoClimate Fetcher Test Suite
Date: 2025-07-07
File Type: CSV Test Data

# Sample Data
timestamp,temperature,humidity,precipitation
2025-01-01,20.5,65.2,0.0
2025-01-02,22.1,62.8,2.5
2025-01-03,19.8,68.4,0.0
2025-01-04,21.3,70.1,1.2
2025-01-05,23.7,58.9,0.0
"""
    
    # Create test file
    test_file = Path("test_data.csv")
    with open(test_file, 'w') as f:
        f.write(test_content)
    
    return test_file

def main():
    st.title("🧪 Download Component Test")
    st.markdown("This page tests the download functionality of the GeoClimate Fetcher.")
    
    # Create test file
    test_file = create_test_file()
    
    st.write(f"**Test File Created:** {test_file}")
    st.write(f"**File Size:** {os.path.getsize(test_file)} bytes")
    st.write(f"**File Exists:** {os.path.exists(test_file)}")
    
    # Initialize download helper
    download_helper = DownloadHelper()
    
    # Test different download methods
    st.markdown("## Download Method Tests")
    
    # Test 1: Basic download button
    st.markdown("### 1. Basic Download Button")
    if st.button("Test Basic Download"):
        success = download_helper.create_download_button(str(test_file), "test_basic.csv")
        if success:
            st.success("✅ Basic download button created successfully")
        else:
            st.error("❌ Basic download button failed")
    
    # Test 2: Auto download button
    st.markdown("### 2. Auto Download Button")
    if st.button("Test Auto Download"):
        success = download_helper.create_auto_download_button(str(test_file), "test_auto.csv")
        if success:
            st.success("✅ Auto download button created successfully")
        else:
            st.error("❌ Auto download button failed")
    
    # Test 3: Instant download
    st.markdown("### 3. Instant Download")
    if st.button("Test Instant Download"):
        success = download_helper.create_instant_download(str(test_file), "test_instant.csv")
        if success:
            st.success("✅ Instant download created successfully")
        else:
            st.error("❌ Instant download failed")
    
    # Test 4: Debug download
    st.markdown("### 4. Debug Download")
    if st.button("Test Debug Download"):
        success = download_helper.create_instant_download_debug(str(test_file), "test_debug.csv")
        if success:
            st.success("✅ Debug download created successfully")
        else:
            st.error("❌ Debug download failed")
    
    # Test 5: Automatic download
    st.markdown("### 5. Automatic Download")
    if st.button("Test Automatic Download"):
        success = download_helper.create_automatic_download(str(test_file), "test_automatic.csv")
        if success:
            st.success("✅ Automatic download created successfully")
        else:
            st.error("❌ Automatic download failed")
    
    # Cleanup option
    st.markdown("---")
    if st.button("🧹 Clean Up Test Files"):
        try:
            if test_file.exists():
                test_file.unlink()
                st.success("✅ Test file cleaned up")
            download_helper.cleanup()
            st.success("✅ Download helper cleaned up")
        except Exception as e:
            st.error(f"❌ Cleanup failed: {str(e)}")
    
    # Instructions
    st.markdown("---")
    st.markdown("### 📋 Instructions")
    st.markdown("""
    1. Click each test button to try different download methods
    2. Check if the download buttons appear
    3. Click the download buttons to test if files actually download
    4. Check your browser's Downloads folder for the files
    5. Use the Debug Download for detailed troubleshooting
    """)
    
    # Browser compatibility notes
    st.markdown("### 🌐 Browser Compatibility")
    st.markdown("""
    **Expected Behavior:**
    - **Chrome/Edge:** Should work with all methods
    - **Firefox:** Should work with all methods
    - **Safari:** May have issues with large data URLs
    - **Mobile browsers:** May have limited support
    
    **Troubleshooting:**
    - If enhanced downloads don't work, use the fallback Streamlit download buttons
    - Check browser console for JavaScript errors (F12 → Console)
    - Large files (>50MB) may need special handling
    """)

if __name__ == "__main__":
    main()
